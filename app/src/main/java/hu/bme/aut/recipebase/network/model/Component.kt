/*
 * Recipebase REST API
 * Recipe database API description.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package hu.bme.aut.recipebase.network.model

import com.google.gson.annotations.SerializedName
import io.swagger.annotations.ApiModelProperty
import java.lang.StringBuilder
import java.util.*

/**
 * Component
 */
class Component {
    /**
     * Get extraComment
     * @return extraComment
     */
    @get:ApiModelProperty(example = "of choice", value = "")
    @SerializedName("extra_comment")
    var extraComment: String? = null

    /**
     * Get ingredient
     * @return ingredient
     */
    @get:ApiModelProperty(value = "")
    @SerializedName("ingredient")
    var ingredient: Ingredient? = null

    /**
     * Get id
     * @return id
     */
    @get:ApiModelProperty(example = "93920.0", value = "")
    @SerializedName("id")
    var id: Long? = null

    /**
     * Get position
     * @return position
     */
    @get:ApiModelProperty(example = "1.0", value = "")
    @SerializedName("position")
    var position: Long? = null

    @SerializedName("measurements")
    private var measurements: MutableList<Measurement>? = null

    /**
     * Get rawText
     * @return rawText
     */
    @get:ApiModelProperty(example = "1 bagel of choice", value = "")
    @SerializedName("raw_text")
    var rawText: String? = null
    fun extraComment(extraComment: String?): Component {
        this.extraComment = extraComment
        return this
    }

    fun ingredient(ingredient: Ingredient?): Component {
        this.ingredient = ingredient
        return this
    }

    fun id(id: Long?): Component {
        this.id = id
        return this
    }

    fun position(position: Long?): Component {
        this.position = position
        return this
    }

    fun measurements(measurements: MutableList<Measurement>?): Component {
        this.measurements = measurements
        return this
    }

    fun addMeasurementsItem(measurementsItem: Measurement): Component {
        if (measurements == null) {
            measurements = ArrayList()
        }
        measurements!!.add(measurementsItem)
        return this
    }

    /**
     * Get measurements
     * @return measurements
     */
    @ApiModelProperty(value = "")
    fun getMeasurements(): List<Measurement>? {
        return measurements
    }

    fun setMeasurements(measurements: MutableList<Measurement>?) {
        this.measurements = measurements
    }

    fun rawText(rawText: String?): Component {
        this.rawText = rawText
        return this
    }

    override fun equals(o: Any?): Boolean {
        if (this === o) {
            return true
        }
        if (o == null || javaClass != o.javaClass) {
            return false
        }
        val component = o as Component
        return extraComment == component.extraComment &&
                ingredient == component.ingredient &&
                id == component.id &&
                position == component.position &&
                measurements == component.measurements &&
                rawText == component.rawText
    }

    override fun hashCode(): Int {
        return Objects.hash(extraComment, ingredient, id, position, measurements, rawText)
    }

    override fun toString(): String {
        val sb = StringBuilder()
        sb.append("class Component {\n")
        sb.append("    extraComment: ").append(toIndentedString(extraComment)).append("\n")
        sb.append("    ingredient: ").append(toIndentedString(ingredient)).append("\n")
        sb.append("    id: ").append(toIndentedString(id)).append("\n")
        sb.append("    position: ").append(toIndentedString(position)).append("\n")
        sb.append("    measurements: ").append(toIndentedString(measurements)).append("\n")
        sb.append("    rawText: ").append(toIndentedString(rawText)).append("\n")
        sb.append("}")
        return sb.toString()
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private fun toIndentedString(o: Any?): String {
        return o?.toString()?.replace("\n", "\n    ") ?: "null"
    }
}