/*
 * Recipebase REST API
 * Recipe database API description.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package hu.bme.aut.recipebase.network.model

import com.google.gson.annotations.SerializedName
import io.swagger.annotations.ApiModelProperty
import java.lang.StringBuilder
import java.math.BigDecimal
import java.util.*

/**
 * Measurement
 */
class Measurement {
    /**
     * Get unit
     * @return unit
     */
    @get:ApiModelProperty(value = "")
    @SerializedName("unit")
    var unit: Unit? = null

    /**
     * Get quantity
     * @return quantity
     */
    @get:ApiModelProperty(example = "1", value = "")
    @SerializedName("quantity")
    var quantity: String? = null

    /**
     * Get id
     * @return id
     */
    @get:ApiModelProperty(example = "689155.0", value = "")
    @SerializedName("id")
    var id: BigDecimal? = null
    fun unit(unit: Unit?): Measurement {
        this.unit = unit
        return this
    }

    fun quantity(quantity: String?): Measurement {
        this.quantity = quantity
        return this
    }

    fun id(id: BigDecimal?): Measurement {
        this.id = id
        return this
    }

    override fun equals(o: Any?): Boolean {
        if (this === o) {
            return true
        }
        if (o == null || javaClass != o.javaClass) {
            return false
        }
        val measurement = o as Measurement
        return unit == measurement.unit &&
                quantity == measurement.quantity &&
                id == measurement.id
    }

    override fun hashCode(): Int {
        return Objects.hash(unit, quantity, id)
    }

    override fun toString(): String {
        val sb = StringBuilder()
        sb.append("class Measurement {\n")
        sb.append("    unit: ").append(toIndentedString(unit)).append("\n")
        sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n")
        sb.append("    id: ").append(toIndentedString(id)).append("\n")
        sb.append("}")
        return sb.toString()
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private fun toIndentedString(o: Any?): String {
        return o?.toString()?.replace("\n", "\n    ") ?: "null"
    }
}